@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace RLMatrix.Dashboard.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script>
    window.chartData = {};
    window.chartLayouts = {};

    window.initChart = function (elementId, title, xAxisTitle, yAxisTitle, initialData, layout) {
        var trace = {
            x: initialData.x,
            y: initialData.y,
            type: 'scatter',
            mode: 'lines',
            connectgaps: true
        };
        layout = layout || {
            title: title,
            xaxis: { title: xAxisTitle },
            yaxis: { title: yAxisTitle },
            margin: { l: 50, r: 50, b: 50, t: 50, pad: 0 },
            paper_bgcolor: 'rgba(0,0,0,0)',
            plot_bgcolor: 'rgba(0,0,0,0)',
            font: { color: '#ffffff' }
        };
        Plotly.newPlot(elementId, [trace], layout, { responsive: true });
        window.chartData[elementId] = { x: initialData.x, y: initialData.y };
        window.chartLayouts[elementId] = layout;
    }

    window.updateChart = function (elementId, newData) {
        var currentData = window.chartData[elementId];
        currentData.x = currentData.x.concat(newData.x);
        currentData.y = currentData.y.concat(newData.y);
        // Thin out data if it exceeds a certain length
        if (currentData.x.length > 1000) {
            var skip = Math.floor(currentData.x.length / 1000);
            if(skip > 1)
            {
                currentData.x = currentData.x.filter((_, index) => index % skip === 0);
                currentData.y = currentData.y.filter((_, index) => index % skip === 0);
            }
        }

        var updatedTrace = {
            x: currentData.x,
            y: currentData.y,
            type: 'scatter',
            mode: 'lines',
        };

        var layout = window.chartLayouts[elementId];

        Plotly.react(elementId, [updatedTrace], layout);
    }

    window.resizeAll = function () {
        document.querySelectorAll('.js-plotly-plot').forEach(el => {
            Plotly.Plots.resize(el);
        });
    }

    window.disposeChart = function (elementId) {
        Plotly.purge(elementId);
        delete window.chartData[elementId];
        delete window.chartLayouts[elementId];
    }

    window.resetAndInitChart = function (elementId, title, xAxisTitle, yAxisTitle, initialData, layout) {
        window.disposeChart(elementId);
        window.initChart(elementId, title, xAxisTitle, yAxisTitle, initialData, layout);
    }

    window.saveAsFile = (fileName, contentType, content) => {
        const link = document.createElement("a");
        const file = new Blob([atob(content)], { type: contentType });
        link.href = URL.createObjectURL(file);
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <base href="~/" />
    <link href="css/site.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
</body>
</html>