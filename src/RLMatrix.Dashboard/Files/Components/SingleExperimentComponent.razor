@page "/experiment/{ExperimentId:guid}"
@using RLMatrix.Common.Dashboard
@using RLMatrix.Dashboard.Services
@inject IDashboardService DashboardService
@inject IJSRuntime JSRuntime
@inject IExportService ExportService
@inject ILogger<SingleExperimentComponent> Logger
@implements IAsyncDisposable

<div class="experiment-container">
    <div class="experiment-title-tile">
        <h2>Experiment @ExperimentStartTime.ToLocalTime().ToString("g")</h2>
        <button class="export-button" @onclick="ExportCsv" disabled="@isExporting">
            @if (isExporting)
            {
                <span>Exporting...</span>
            }
            else
            {
                <span>Export as CSV</span>
            }
        </button>
    </div>
    <div class="chart-grid">
        @foreach (var chartKey in _chartKeys)
        {
            <div class="chart-tile @(_activeCharts.Contains(chartKey) ? "" : "hidden")">
                <div id="@GetChartId(chartKey)" class="chart-container"></div>
            </div>
        }
    </div>
</div>

<style>
    .experiment-container {
        width: 100%;
        color: #ffffff;
        padding: 0 0px;
        box-sizing: border-box;
    }

    .experiment-title-tile {
        background-color: #252526;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        /* padding: 16px; */
        margin-bottom: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .experiment-title-tile h2 {
            margin: 0;
            color: #ffffff;
        }

    .export-button {
        background-color: #0078d4;
        color: #ffffff;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .export-button:hover {
        background-color: #106ebe;
    }

    .export-button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }

    .chart-grid {
        display: grid;
        grid-template-columns: repeat(3, minmax(0, 1fr));
        gap: 0px;
    }

    .chart-tile {
        background-color: #252526;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 0px;
    }

    .chart-container {
        height: 300px;
    }

    .hidden {
        display: none;
    }
</style>

@code {
    [Parameter]
    public Guid ExperimentId { get; set; }

    private DateTime ExperimentStartTime { get; set; }
    private string[] _chartKeys = {
        "Reward", "CumulativeReward", "EpisodeLength", 
        "KLDivergence", "Entropy",
        "Epsilon", "Loss", "LearningRate",
        "ActorLoss", "CriticLoss", "ActorLearningRate", "CriticLearningRate", 
    };
    private HashSet<string> _activeCharts = new HashSet<string>();
    private int _currentEpisode = 0;
    private List<ExperimentData> _experimentData = new List<ExperimentData>();
    private bool isExporting = false;
    private bool _chartsInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        ExperimentStartTime = DashboardService.GetExperimentStartTime(ExperimentId);
        _experimentData = await DashboardService.GetExperimentDataAsync(ExperimentId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeChartsAsync();
        }
    }

    private string GetChartId(string chartKey) => $"{chartKey.ToLower()}-chart-{ExperimentId}";

    private async Task InitializeChartsAsync()
    {
        if (_experimentData == null || !_experimentData.Any() || _chartsInitialized)
        {
            return;
        }

        var uniqueData = _experimentData.GroupBy(d => d.Timestamp)
                                        .Select(g => g.First())
                                        .OrderBy(d => d.Timestamp)
                                        .ToList();

        var episodes = Enumerable.Range(0, uniqueData.Count).ToArray();
        _currentEpisode = episodes.Length - 1;

        foreach (var chartKey in _chartKeys)
        {
            if (await InitializeChart(chartKey, uniqueData, episodes))
            {
                _activeCharts.Add(chartKey);
            }
        }


        _chartsInitialized = true;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("resizeAll");
    }

    private async Task<bool> InitializeChart(string chartKey, List<ExperimentData> uniqueData, int[] episodes)
    {
        var data = uniqueData.Select(d => GetValueForChart(d, chartKey)).ToArray();
        if (data.Any(d => d.HasValue))
        {
            var plotData = new
            {
                x = episodes,
                y = data
            };
            var layout = new
            {
                title = $"{chartKey} Over Time",
                xaxis = new { title = "Episode" },
                yaxis = new { title = chartKey },
                margin = new { l = 50, r = 50, b = 50, t = 50, pad = 4 },
                paper_bgcolor = "rgba(0,0,0,0)",
                plot_bgcolor = "rgba(0,0,0,0)",
                font = new { color = "#ffffff" }
            };

            var chartId = GetChartId(chartKey);
            var exists = await JSRuntime.InvokeAsync<bool>("eval", $"document.getElementById('{chartId}') !== null");
            if (exists)
            {
                await JSRuntime.InvokeVoidAsync("initChart", chartId, $"{chartKey} Over Time", "Episode", chartKey, plotData, layout);
                return true;
            }
        }
        return false;
    }

    public async Task UpdateCharts(IList<ExperimentData> batch)
    {
        if (!_chartsInitialized)
        {
            _experimentData.AddRange(batch);
            await InitializeChartsAsync();
            return;
        }

        var updateTasks = new List<Task>();

        var batchedData = _chartKeys.ToDictionary(key => GetChartId(key), _ => (new List<int>(), new List<double?>()));

        foreach (var data in batch)
        {
            _currentEpisode++;

            foreach (var chartKey in _chartKeys)
            {
                var value = GetValueForChart(data, chartKey);
                if (value.HasValue)
                {
                    var chartId = GetChartId(chartKey);
                    batchedData[chartId].Item1.Add(_currentEpisode);
                    batchedData[chartId].Item2.Add(value.Value);

                    if (!_activeCharts.Contains(chartKey))
                    {
                        var initialized = await InitializeChart(chartKey, new List<ExperimentData> { data }, new[] { _currentEpisode });
                        if (initialized)
                        {
                            _activeCharts.Add(chartKey);
                            StateHasChanged();
                        }
                    }
                }
            }

            _experimentData.Add(data);
        }

        foreach (var kvp in batchedData)
        {
            if (kvp.Value.Item1.Any())
            {
                updateTasks.Add(JSRuntime.InvokeVoidAsync("updateChart", kvp.Key, new { x = kvp.Value.Item1, y = kvp.Value.Item2 }).AsTask());
            }
        }

        await Task.WhenAll(updateTasks);
    }

    private double? GetValueForChart(ExperimentData data, string chartKey)
    {
        return chartKey switch
        {
            "Reward" => data.Reward,
            "CumulativeReward" => data.CumulativeReward,
            "EpisodeLength" => data.EpisodeLength,
            "ActorLoss" => data.ActorLoss,
            "ActorLearningRate" => data.ActorLearningRate,
            "CriticLoss" => data.CriticLoss,
            "CriticLearningRate" => data.CriticLearningRate,
            "KLDivergence" => data.KLDivergence,
            "Entropy" => data.Entropy,
            "Epsilon" => data.Epsilon,
            "Loss" => data.Loss,
            "LearningRate" => data.LearningRate,
            _ => null,
        };
    }

    private async Task ExportCsv()
    {
        if (isExporting) return;

        isExporting = true;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Starting CSV export for Experiment {ExperimentId}", ExperimentId);
            var fileContent = await ExportService.ExportExperimentDataAsCsv(_experimentData);

            var fileName = $"experiment_{ExperimentId}_{DateTime.Now:yyyyMMddHHmmss}.csv";

            Logger.LogInformation("CSV file generated successfully. Initiating download.");

            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, "text/csv", Convert.ToBase64String(fileContent));

            Logger.LogInformation("CSV file download initiated for user.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred during CSV export for Experiment {ExperimentId}", ExperimentId);
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        foreach (var chartKey in _activeCharts)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("disposeChart", GetChartId(chartKey));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error disposing chart {ChartId}", GetChartId(chartKey));
            }
        }
    }
}